// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	add_comment "MoviesDB/restapi/operations/add_comment"
	add_movie "MoviesDB/restapi/operations/add_movie"

	middleware "github.com/go-openapi/runtime/middleware"

	mock "github.com/stretchr/testify/mock"

	movieinfo "MoviesDB/restapi/operations/movieinfo"
)

// ServiceInterface is an autogenerated mock type for the ServiceInterface type
type ServiceInterface struct {
	mock.Mock
}

// AddComment provides a mock function with given fields: params
func (_m *ServiceInterface) AddComment(params add_comment.PostcommentsParams) middleware.Responder {
	ret := _m.Called(params)

	var r0 middleware.Responder
	if rf, ok := ret.Get(0).(func(add_comment.PostcommentsParams) middleware.Responder); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(middleware.Responder)
		}
	}

	return r0
}

// AddMovies provides a mock function with given fields: params
func (_m *ServiceInterface) AddMovies(params add_movie.PostmovieParams) middleware.Responder {
	ret := _m.Called(params)

	var r0 middleware.Responder
	if rf, ok := ret.Get(0).(func(add_movie.PostmovieParams) middleware.Responder); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(middleware.Responder)
		}
	}

	return r0
}

// GetMoviesInfo provides a mock function with given fields: params
func (_m *ServiceInterface) GetMoviesInfo(params movieinfo.GetmoviesinfoParams) middleware.Responder {
	ret := _m.Called(params)

	var r0 middleware.Responder
	if rf, ok := ret.Get(0).(func(movieinfo.GetmoviesinfoParams) middleware.Responder); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(middleware.Responder)
		}
	}

	return r0
}

// MovieNameIsValid provides a mock function with given fields: moviename
func (_m *ServiceInterface) MovieNameIsValid(moviename string) string {
	ret := _m.Called(moviename)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(moviename)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ReadDocument provides a mock function with given fields: filterobj, outputObject
func (_m *ServiceInterface) ReadDocument(filterobj interface{}, outputObject interface{}) (interface{}, error) {
	ret := _m.Called(filterobj, outputObject)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(interface{}, interface{}) interface{}); ok {
		r0 = rf(filterobj, outputObject)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, interface{}) error); ok {
		r1 = rf(filterobj, outputObject)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDocument provides a mock function with given fields: filterObject, operation, update
func (_m *ServiceInterface) UpdateDocument(filterObject interface{}, operation string, update map[string]interface{}) (int64, error) {
	ret := _m.Called(filterObject, operation, update)

	var r0 int64
	if rf, ok := ret.Get(0).(func(interface{}, string, map[string]interface{}) int64); ok {
		r0 = rf(filterObject, operation, update)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, string, map[string]interface{}) error); ok {
		r1 = rf(filterObject, operation, update)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserNameIsValid provides a mock function with given fields: uname
func (_m *ServiceInterface) UserNameIsValid(uname string) string {
	ret := _m.Called(uname)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(uname)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}
