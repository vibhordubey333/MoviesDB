// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	add_comment "MoviesDB/restapi/operations/add_comment"
	add_movie "MoviesDB/restapi/operations/add_movie"

	middleware "github.com/go-openapi/runtime/middleware"

	mock "github.com/stretchr/testify/mock"

	movieinfo "MoviesDB/restapi/operations/movieinfo"
)

// HandlersInterface is an autogenerated mock type for the HandlersInterface type
type HandlersInterface struct {
	mock.Mock
}

// AddComments provides a mock function with given fields: params
func (_m *HandlersInterface) AddComments(params add_comment.PostcommentsParams) middleware.Responder {
	ret := _m.Called(params)

	var r0 middleware.Responder
	if rf, ok := ret.Get(0).(func(add_comment.PostcommentsParams) middleware.Responder); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(middleware.Responder)
		}
	}

	return r0
}

// AddMovies provides a mock function with given fields: params
func (_m *HandlersInterface) AddMovies(params add_movie.PostmovieParams) middleware.Responder {
	ret := _m.Called(params)

	var r0 middleware.Responder
	if rf, ok := ret.Get(0).(func(add_movie.PostmovieParams) middleware.Responder); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(middleware.Responder)
		}
	}

	return r0
}

// GetMovieInfo provides a mock function with given fields: params
func (_m *HandlersInterface) GetMovieInfo(params movieinfo.GetmoviesinfoParams) middleware.Responder {
	ret := _m.Called(params)

	var r0 middleware.Responder
	if rf, ok := ret.Get(0).(func(movieinfo.GetmoviesinfoParams) middleware.Responder); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(middleware.Responder)
		}
	}

	return r0
}
