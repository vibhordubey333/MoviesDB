// Code generated by go-swagger; DO NOT EDIT.

package movieinfo

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetMovieInfoHandlerFunc turns a function with the right signature into a get movie info handler
type GetMovieInfoHandlerFunc func(GetMovieInfoParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetMovieInfoHandlerFunc) Handle(params GetMovieInfoParams) middleware.Responder {
	return fn(params)
}

// GetMovieInfoHandler interface for that can handle valid get movie info params
type GetMovieInfoHandler interface {
	Handle(GetMovieInfoParams) middleware.Responder
}

// NewGetMovieInfo creates a new http.Handler for the get movie info operation
func NewGetMovieInfo(ctx *middleware.Context, handler GetMovieInfoHandler) *GetMovieInfo {
	return &GetMovieInfo{Context: ctx, Handler: handler}
}

/*GetMovieInfo swagger:route GET /imdbservice/movieinfo movieinfo getMovieInfo

Get a information about movie.

Get a information about movie.

*/
type GetMovieInfo struct {
	Context *middleware.Context
	Handler GetMovieInfoHandler
}

func (o *GetMovieInfo) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetMovieInfoParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetMovieInfoBody get movie info body
//
// swagger:model GetMovieInfoBody
type GetMovieInfoBody struct {

	// Movie name.
	MovieName string `json:"MovieName,omitempty"`

	// User name.
	UserName string `json:"UserName,omitempty"`
}

// Validate validates this get movie info body
func (o *GetMovieInfoBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetMovieInfoBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetMovieInfoBody) UnmarshalBinary(b []byte) error {
	var res GetMovieInfoBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetMovieInfoOKBody get movie info o k body
//
// swagger:model GetMovieInfoOKBody
type GetMovieInfoOKBody struct {

	// File upload message
	AvgRating string `json:"avgRating,omitempty"`

	// Response Code
	MovieName string `json:"movieName,omitempty"`

	// File upload message
	RatingGivenCount int64 `json:"ratingGivenCount,omitempty"`

	// user comments
	UserComments []*UserCommentsItems0 `json:"userComments"`
}

// Validate validates this get movie info o k body
func (o *GetMovieInfoOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateUserComments(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetMovieInfoOKBody) validateUserComments(formats strfmt.Registry) error {

	if swag.IsZero(o.UserComments) { // not required
		return nil
	}

	for i := 0; i < len(o.UserComments); i++ {
		if swag.IsZero(o.UserComments[i]) { // not required
			continue
		}

		if o.UserComments[i] != nil {
			if err := o.UserComments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getMovieInfoOK" + "." + "userComments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetMovieInfoOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetMovieInfoOKBody) UnmarshalBinary(b []byte) error {
	var res GetMovieInfoOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// UserCommentsItems0 user comments items0
//
// swagger:model UserCommentsItems0
type UserCommentsItems0 struct {

	// Comment given by user.
	Comment string `json:"comment,omitempty"`

	// Name of the user.
	Username string `json:"username,omitempty"`
}

// Validate validates this user comments items0
func (o *UserCommentsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UserCommentsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UserCommentsItems0) UnmarshalBinary(b []byte) error {
	var res UserCommentsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
