// Code generated by go-swagger; DO NOT EDIT.

package movieinfo

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"MoviesDB/models"
)

// GetmoviesinfoOKCode is the HTTP code returned for type GetmoviesinfoOK
const GetmoviesinfoOKCode int = 200

/*GetmoviesinfoOK Success.

swagger:response getmoviesinfoOK
*/
type GetmoviesinfoOK struct {

	/*
	  In: Body
	*/
	Payload *GetmoviesinfoOKBody `json:"body,omitempty"`
}

// NewGetmoviesinfoOK creates GetmoviesinfoOK with default headers values
func NewGetmoviesinfoOK() *GetmoviesinfoOK {

	return &GetmoviesinfoOK{}
}

// WithPayload adds the payload to the getmoviesinfo o k response
func (o *GetmoviesinfoOK) WithPayload(payload *GetmoviesinfoOKBody) *GetmoviesinfoOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the getmoviesinfo o k response
func (o *GetmoviesinfoOK) SetPayload(payload *GetmoviesinfoOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetmoviesinfoOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetmoviesinfoInternalServerErrorCode is the HTTP code returned for type GetmoviesinfoInternalServerError
const GetmoviesinfoInternalServerErrorCode int = 500

/*GetmoviesinfoInternalServerError Server Error

swagger:response getmoviesinfoInternalServerError
*/
type GetmoviesinfoInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetmoviesinfoInternalServerError creates GetmoviesinfoInternalServerError with default headers values
func NewGetmoviesinfoInternalServerError() *GetmoviesinfoInternalServerError {

	return &GetmoviesinfoInternalServerError{}
}

// WithPayload adds the payload to the getmoviesinfo internal server error response
func (o *GetmoviesinfoInternalServerError) WithPayload(payload *models.Error) *GetmoviesinfoInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the getmoviesinfo internal server error response
func (o *GetmoviesinfoInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetmoviesinfoInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetmoviesinfoDefault error

swagger:response getmoviesinfoDefault
*/
type GetmoviesinfoDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetmoviesinfoDefault creates GetmoviesinfoDefault with default headers values
func NewGetmoviesinfoDefault(code int) *GetmoviesinfoDefault {
	if code <= 0 {
		code = 500
	}

	return &GetmoviesinfoDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the getmoviesinfo default response
func (o *GetmoviesinfoDefault) WithStatusCode(code int) *GetmoviesinfoDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the getmoviesinfo default response
func (o *GetmoviesinfoDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the getmoviesinfo default response
func (o *GetmoviesinfoDefault) WithPayload(payload *models.Error) *GetmoviesinfoDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the getmoviesinfo default response
func (o *GetmoviesinfoDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetmoviesinfoDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
