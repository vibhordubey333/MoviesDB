// Code generated by go-swagger; DO NOT EDIT.

package movieinfo

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetmoviesinfoHandlerFunc turns a function with the right signature into a getmoviesinfo handler
type GetmoviesinfoHandlerFunc func(GetmoviesinfoParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetmoviesinfoHandlerFunc) Handle(params GetmoviesinfoParams) middleware.Responder {
	return fn(params)
}

// GetmoviesinfoHandler interface for that can handle valid getmoviesinfo params
type GetmoviesinfoHandler interface {
	Handle(GetmoviesinfoParams) middleware.Responder
}

// NewGetmoviesinfo creates a new http.Handler for the getmoviesinfo operation
func NewGetmoviesinfo(ctx *middleware.Context, handler GetmoviesinfoHandler) *Getmoviesinfo {
	return &Getmoviesinfo{Context: ctx, Handler: handler}
}

/*Getmoviesinfo swagger:route GET /imdbservice/movieinfo movieinfo getmoviesinfo

Get a information about movie.

Get a information about movie.

*/
type Getmoviesinfo struct {
	Context *middleware.Context
	Handler GetmoviesinfoHandler
}

func (o *Getmoviesinfo) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetmoviesinfoParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetmoviesinfoBody getmoviesinfo body
//
// swagger:model GetmoviesinfoBody
type GetmoviesinfoBody struct {

	// Movie name.
	MovieName string `json:"MovieName,omitempty"`
}

// Validate validates this getmoviesinfo body
func (o *GetmoviesinfoBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetmoviesinfoBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetmoviesinfoBody) UnmarshalBinary(b []byte) error {
	var res GetmoviesinfoBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetmoviesinfoOKBody getmoviesinfo o k body
//
// swagger:model GetmoviesinfoOKBody
type GetmoviesinfoOKBody struct {

	// Rating.
	AvgRating string `json:"AvgRating,omitempty"`

	// Response Code
	MovieName string `json:"MovieName,omitempty"`

	// Rating count.
	PeopleRated int64 `json:"PeopleRated,omitempty"`

	// user comments
	UserComments []string `json:"UserComments"`
}

// Validate validates this getmoviesinfo o k body
func (o *GetmoviesinfoOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateUserComments(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetmoviesinfoOKBody) validateUserComments(formats strfmt.Registry) error {

	if swag.IsZero(o.UserComments) { // not required
		return nil
	}

	for i := 0; i < len(o.UserComments); i++ {

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetmoviesinfoOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetmoviesinfoOKBody) UnmarshalBinary(b []byte) error {
	var res GetmoviesinfoOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
