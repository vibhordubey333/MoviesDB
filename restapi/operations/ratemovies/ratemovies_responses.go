// Code generated by go-swagger; DO NOT EDIT.

package ratemovies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"MoviesDB/models"
)

// RatemoviesOKCode is the HTTP code returned for type RatemoviesOK
const RatemoviesOKCode int = 200

/*RatemoviesOK Listing movies insepected by user.

swagger:response ratemoviesOK
*/
type RatemoviesOK struct {

	/*
	  In: Body
	*/
	Payload []*RatemoviesOKBodyItems0 `json:"body,omitempty"`
}

// NewRatemoviesOK creates RatemoviesOK with default headers values
func NewRatemoviesOK() *RatemoviesOK {

	return &RatemoviesOK{}
}

// WithPayload adds the payload to the ratemovies o k response
func (o *RatemoviesOK) WithPayload(payload []*RatemoviesOKBodyItems0) *RatemoviesOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the ratemovies o k response
func (o *RatemoviesOK) SetPayload(payload []*RatemoviesOKBodyItems0) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RatemoviesOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*RatemoviesOKBodyItems0, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// RatemoviesInternalServerErrorCode is the HTTP code returned for type RatemoviesInternalServerError
const RatemoviesInternalServerErrorCode int = 500

/*RatemoviesInternalServerError Server Error

swagger:response ratemoviesInternalServerError
*/
type RatemoviesInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewRatemoviesInternalServerError creates RatemoviesInternalServerError with default headers values
func NewRatemoviesInternalServerError() *RatemoviesInternalServerError {

	return &RatemoviesInternalServerError{}
}

// WithPayload adds the payload to the ratemovies internal server error response
func (o *RatemoviesInternalServerError) WithPayload(payload *models.Error) *RatemoviesInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the ratemovies internal server error response
func (o *RatemoviesInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RatemoviesInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*RatemoviesDefault error

swagger:response ratemoviesDefault
*/
type RatemoviesDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewRatemoviesDefault creates RatemoviesDefault with default headers values
func NewRatemoviesDefault(code int) *RatemoviesDefault {
	if code <= 0 {
		code = 500
	}

	return &RatemoviesDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the ratemovies default response
func (o *RatemoviesDefault) WithStatusCode(code int) *RatemoviesDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the ratemovies default response
func (o *RatemoviesDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the ratemovies default response
func (o *RatemoviesDefault) WithPayload(payload *models.Error) *RatemoviesDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the ratemovies default response
func (o *RatemoviesDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RatemoviesDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
