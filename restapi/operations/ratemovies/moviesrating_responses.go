// Code generated by go-swagger; DO NOT EDIT.

package ratemovies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"MoviesDB/models"
)

// MoviesratingOKCode is the HTTP code returned for type MoviesratingOK
const MoviesratingOKCode int = 200

/*MoviesratingOK Listing movies insepected by user.

swagger:response moviesratingOK
*/
type MoviesratingOK struct {

	/*
	  In: Body
	*/
	Payload []*MoviesratingOKBodyItems0 `json:"body,omitempty"`
}

// NewMoviesratingOK creates MoviesratingOK with default headers values
func NewMoviesratingOK() *MoviesratingOK {

	return &MoviesratingOK{}
}

// WithPayload adds the payload to the moviesrating o k response
func (o *MoviesratingOK) WithPayload(payload []*MoviesratingOKBodyItems0) *MoviesratingOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the moviesrating o k response
func (o *MoviesratingOK) SetPayload(payload []*MoviesratingOKBodyItems0) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *MoviesratingOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*MoviesratingOKBodyItems0, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// MoviesratingInternalServerErrorCode is the HTTP code returned for type MoviesratingInternalServerError
const MoviesratingInternalServerErrorCode int = 500

/*MoviesratingInternalServerError Server Error

swagger:response moviesratingInternalServerError
*/
type MoviesratingInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewMoviesratingInternalServerError creates MoviesratingInternalServerError with default headers values
func NewMoviesratingInternalServerError() *MoviesratingInternalServerError {

	return &MoviesratingInternalServerError{}
}

// WithPayload adds the payload to the moviesrating internal server error response
func (o *MoviesratingInternalServerError) WithPayload(payload *models.Error) *MoviesratingInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the moviesrating internal server error response
func (o *MoviesratingInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *MoviesratingInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*MoviesratingDefault error

swagger:response moviesratingDefault
*/
type MoviesratingDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewMoviesratingDefault creates MoviesratingDefault with default headers values
func NewMoviesratingDefault(code int) *MoviesratingDefault {
	if code <= 0 {
		code = 500
	}

	return &MoviesratingDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the moviesrating default response
func (o *MoviesratingDefault) WithStatusCode(code int) *MoviesratingDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the moviesrating default response
func (o *MoviesratingDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the moviesrating default response
func (o *MoviesratingDefault) WithPayload(payload *models.Error) *MoviesratingDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the moviesrating default response
func (o *MoviesratingDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *MoviesratingDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
