// Code generated by go-swagger; DO NOT EDIT.

package add_comment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"MoviesDB/models"
)

// PostcommentsOKCode is the HTTP code returned for type PostcommentsOK
const PostcommentsOKCode int = 200

/*PostcommentsOK Comment added successfully.

swagger:response postcommentsOK
*/
type PostcommentsOK struct {

	/*
	  In: Body
	*/
	Payload *PostcommentsOKBody `json:"body,omitempty"`
}

// NewPostcommentsOK creates PostcommentsOK with default headers values
func NewPostcommentsOK() *PostcommentsOK {

	return &PostcommentsOK{}
}

// WithPayload adds the payload to the postcomments o k response
func (o *PostcommentsOK) WithPayload(payload *PostcommentsOKBody) *PostcommentsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the postcomments o k response
func (o *PostcommentsOK) SetPayload(payload *PostcommentsOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostcommentsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostcommentsInternalServerErrorCode is the HTTP code returned for type PostcommentsInternalServerError
const PostcommentsInternalServerErrorCode int = 500

/*PostcommentsInternalServerError Server Error

swagger:response postcommentsInternalServerError
*/
type PostcommentsInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostcommentsInternalServerError creates PostcommentsInternalServerError with default headers values
func NewPostcommentsInternalServerError() *PostcommentsInternalServerError {

	return &PostcommentsInternalServerError{}
}

// WithPayload adds the payload to the postcomments internal server error response
func (o *PostcommentsInternalServerError) WithPayload(payload *models.Error) *PostcommentsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the postcomments internal server error response
func (o *PostcommentsInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostcommentsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*PostcommentsDefault error

swagger:response postcommentsDefault
*/
type PostcommentsDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostcommentsDefault creates PostcommentsDefault with default headers values
func NewPostcommentsDefault(code int) *PostcommentsDefault {
	if code <= 0 {
		code = 500
	}

	return &PostcommentsDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the postcomments default response
func (o *PostcommentsDefault) WithStatusCode(code int) *PostcommentsDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the postcomments default response
func (o *PostcommentsDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the postcomments default response
func (o *PostcommentsDefault) WithPayload(payload *models.Error) *PostcommentsDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the postcomments default response
func (o *PostcommentsDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostcommentsDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
