// Code generated by go-swagger; DO NOT EDIT.

package add_movie

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PostmovieHandlerFunc turns a function with the right signature into a postmovie handler
type PostmovieHandlerFunc func(PostmovieParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostmovieHandlerFunc) Handle(params PostmovieParams) middleware.Responder {
	return fn(params)
}

// PostmovieHandler interface for that can handle valid postmovie params
type PostmovieHandler interface {
	Handle(PostmovieParams) middleware.Responder
}

// NewPostmovie creates a new http.Handler for the postmovie operation
func NewPostmovie(ctx *middleware.Context, handler PostmovieHandler) *Postmovie {
	return &Postmovie{Context: ctx, Handler: handler}
}

/*Postmovie swagger:route POST /imdbservice/addmovie addMovie postmovie

Add movie into DB.

Add movie into DB.

*/
type Postmovie struct {
	Context *middleware.Context
	Handler PostmovieHandler
}

func (o *Postmovie) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostmovieParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostmovieBody postmovie body
//
// swagger:model PostmovieBody
type PostmovieBody struct {

	// Movie comments.
	MovieComments string `json:"MovieComments,omitempty"`

	// Movie name.
	MovieName string `json:"MovieName,omitempty"`

	// Movie rating.
	MovieRating string `json:"MovieRating,omitempty"`
}

// Validate validates this postmovie body
func (o *PostmovieBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostmovieBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostmovieBody) UnmarshalBinary(b []byte) error {
	var res PostmovieBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostmovieOKBody postmovie o k body
//
// swagger:model PostmovieOKBody
type PostmovieOKBody struct {

	// Response Code
	Code string `json:"Code,omitempty"`

	// Success message
	Message string `json:"Message,omitempty"`
}

// Validate validates this postmovie o k body
func (o *PostmovieOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostmovieOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostmovieOKBody) UnmarshalBinary(b []byte) error {
	var res PostmovieOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
