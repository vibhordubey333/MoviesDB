// Code generated by go-swagger; DO NOT EDIT.

package add_movie

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"MoviesDB/models"
)

// AddmovieratingOKCode is the HTTP code returned for type AddmovieratingOK
const AddmovieratingOKCode int = 200

/*AddmovieratingOK Rating added successfully.

swagger:response addmovieratingOK
*/
type AddmovieratingOK struct {

	/*
	  In: Body
	*/
	Payload *AddmovieratingOKBody `json:"body,omitempty"`
}

// NewAddmovieratingOK creates AddmovieratingOK with default headers values
func NewAddmovieratingOK() *AddmovieratingOK {

	return &AddmovieratingOK{}
}

// WithPayload adds the payload to the addmovierating o k response
func (o *AddmovieratingOK) WithPayload(payload *AddmovieratingOKBody) *AddmovieratingOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the addmovierating o k response
func (o *AddmovieratingOK) SetPayload(payload *AddmovieratingOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddmovieratingOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddmovieratingInternalServerErrorCode is the HTTP code returned for type AddmovieratingInternalServerError
const AddmovieratingInternalServerErrorCode int = 500

/*AddmovieratingInternalServerError Server Error

swagger:response addmovieratingInternalServerError
*/
type AddmovieratingInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAddmovieratingInternalServerError creates AddmovieratingInternalServerError with default headers values
func NewAddmovieratingInternalServerError() *AddmovieratingInternalServerError {

	return &AddmovieratingInternalServerError{}
}

// WithPayload adds the payload to the addmovierating internal server error response
func (o *AddmovieratingInternalServerError) WithPayload(payload *models.Error) *AddmovieratingInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the addmovierating internal server error response
func (o *AddmovieratingInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddmovieratingInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*AddmovieratingDefault error

swagger:response addmovieratingDefault
*/
type AddmovieratingDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAddmovieratingDefault creates AddmovieratingDefault with default headers values
func NewAddmovieratingDefault(code int) *AddmovieratingDefault {
	if code <= 0 {
		code = 500
	}

	return &AddmovieratingDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the addmovierating default response
func (o *AddmovieratingDefault) WithStatusCode(code int) *AddmovieratingDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the addmovierating default response
func (o *AddmovieratingDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the addmovierating default response
func (o *AddmovieratingDefault) WithPayload(payload *models.Error) *AddmovieratingDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the addmovierating default response
func (o *AddmovieratingDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddmovieratingDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
